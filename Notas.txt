
CAPÍTULO 1: Objetos y clases

        
        1.1 Objetos y clases
            Los objetos se crean a partir de clases.
            Los objetos pueden ser ornagizados en categorías, y la clase describe en forma abstracta todos los objetos de un tipo particular.
            Los objetos representan casos individuales de una clase.
            A los objetos particulares se les llama instancia. Por ejemplo la clase auto, el objeto particular es mi auto, entonces se puede decir que mi auto es una instancia de la clase auto.

    
        1.2 Crear objetos
            Se crean a partir de una clase. Se instancía la clase.
            El nombre de la clase debe comenzar con la primer letra en mayuscula.


        1.3 Invocar métodos
            A travéz del llamado a sus métodos de cada objeto es como podemos comunicarnos con ellos (llamados o invocados)

        1.4 Parámetros
            Los métodos pueden contener parámetros para proporcionar información adicional al realizar una tarea.
            El método indica el tipo de parametro que requiere, por ejemplo: void moverHorizontal(int distancia) <- esta línea se denomina "signatura".
            Pueden existir varios parametros en un metodo.

        1.5 Tipos de datos
            Los parámetros tienen tipos de datos y el tipo de dato define la clase de valor que un parámetro puede tomar.

        1.6 Instancias múltiples
            Se pueden crear múltiples objetos/instancias similares a partir de una sola clase.
            Cada isntancia puede tener un estado independiente a las demas instancias.

        1.7 Estado
            Los objetos tienen un estado el cual es representado por los valores almacenados en sus campos.
            En java a los atributos de un objeto se les llama campos.

        1.8 Que es un objeto
            Los objetos de una misma clase tienen campos identicos en tipo de dato, nombre de campo y numero de campos ya que pertenecen a la misma clase.
            En cambio objetos de clases diferentes tienen diferentes campos con diferentes tipos de datos.
            Los campos se definen en la clase y no en el objeto.
            Los valores de los campos SI se almacenan en el objeto/instancia.
            Es la misma historia para los métodos, ya que estos se definen en la clase por lo que todos los objetos de una misma clase tienen los mismos métodos. 
            Los métodos se invocan desde los objetos por eso al invocar el mismo objeto desde diferentes instancias el resultado puede ser diferente de acuerdo al estado de la instancia.


        1.9 Interaccion entre objetos
            Los objetos se pueden comunicar entre ellos invocando los metodos de los otros objetos.
            Generalmente al desarrollar creamos un objeto que se inicializa y éste a su vez se encarga de crear otros objetos de forma directa o indirectamente.

        1.10 Código fuente
            Determina la estructura (campos) y el comportamiento (metodos) de de cada uno de los objetos de dicha clase.

        1.11 Otro ejemplo


        1.12 Valores de retorno
            Los métodos pueden devolver información de algun objeto mediante un valor de retorno.
            Se suelen usar para investigar el estado de un objeto.

        1.13 Objetos como parámetros
            Cuando se pasa como parámetro un objeto a un método se especifica el nombre de la clase de ese objeto como tipo de parámetro en la signatura de dicho método.
                void inscribirEstudiante(Estudiante nuevoEstudiante)


        1.14 Resumen




CAPITULO 2: Comprender las definiciones de clases 

    2.1 Maquina expendedora de boletos
        Uso básico solo a forma de práctica para conocer conceptos necesarios para los siguientes temas

    2.2 Examinar una definición de clase
        Codigo fuente mostrado para ver la definición de una clase con sus campos y métodos.

    2.3 Campos, constructores y métodos
        En la parte interna de una clase es en donde se definen sus campos, metodos y constructores, éstos dan a los objetos sus características particulares.
        Los campos almacenan datos para que cada objelo los use.
        Los constructores permiten que cada objeto se prepare adecuadamente cuando es creado.
        Los métodos implementan el comportamiento de los objetos.
        Los constructores NUNCA tienen tipo de retorno, ni siquiera con void

            2.3.1 Campos
                Almacenan datos para que luego los use un objeto. También son llamados variables de instancia.
                Es un espacio disponible asignado a cada objeto al momento de ser creado. Aqui se alojan cada campo declarado en su clase.
                Su alcance se limita a la clase que lo declara, puede ser accedido desde cualquier lugar de la misma clase.

            2.3.2 Constructores
                Permiten que cada objeto sea preparado adecuadamente cuando es creado.
                Su responsabilidad es poner un poner un objeto en un estado para poder ser usado una vez construido.
                Al declararlos, usan el mismo nombre que la clase.

                En java todos los campos se inicializan con un valor por defecto, si no se inicializan explicitamente,  de acuerdo al tipo de dato y a la visibilidad del campo. Para los campos enteros es 0. Siempre es mejor definir el valor explicitamente.


    2.4 Pasar datos mediante parámetros
        Los métodos y los constructores reciben valores mediante sus parámetros. 
        El constructor suele recibir datos de otra fuente (por ejemplo el usuario, luego este valor recibido lo asigna a algun campo del objeto), este espacio se llama - Espacio del constructor del objeto / Espacio del método.
        Se debe distinguir entre el nombre del parametro dentro del constructor / método y valores de los parámetros fuera del constructor / metodo.
        Se hace referencia a los nombres como parametros formales (realmente son otra clase de variables puesto que permiten almacenar valores) y a los valores como parametros actuales.
            declaracion:
                public MaquinaDeBoletos(int precioDelBoleto) 

            invocacion:
                MaquinaDeBoletos(500)

            precioDelBoleto -> Parametro formal : Su alcance solo disponible dentro del metodo / constructor que lo declara.
            500 -> parametro actual


        Alcance de la variable / Tiempo de vida de la variable
            Estos conceptos se relacionan. 
            El tiempo de vida de un parámetro se limita a una sola llamada de un constructor o método. Despupes de completarse la tarea de un constructor o metodo los parametros formales desaparecen ya que se elimina el espacio del constructor / método.

            El tiempo de vida de un campo dura mientras dura el objeto que lo contiene. Por eso los parámetros del constructor / método se guardan en los campos que son mas persistentes.


    2.5 Asignación
        Pasar el valor del lado derecho a la variable del lado izquierdo, se asigna su valor. Deben ser del mismo tipo para poder realizarse la asignación.

            precio = precioDelBoleto;

        A la parte de la derecha se le llama expresión, y las evalua la computadora.


     2.6 Metodos de Acceso
        Métodos que accesan a los campos de una clase para retornar un valor.
        Por ejemplo getPrecio()

     2.7 Metodos de Modificacion
        Métodos que mofidican el estado de un objeto, pasando de un estado A antes del llamado al método a un estado B después del llamado al método modificador.
        Por ejemplo setPrecio(3.5)

    2.8 Imprimir desde métodos - Pag 35
        println
        Concatenación de cadenas.

    2.9 Resumen de la máquina de boletos simplificada
        Resumen de los metodos y campos de la maquina de boletos simplificada.

    2.10 Reflexión sobre el diseño de la maquina de boletos
        La maquina de boletos por ahora es muy básica y carece de mecanismos de supervisión para evitar fallos 

    2.11 Hacer elecciones: la sentencia condicional
        Máquina de boletos más sofisticada
        Una sentencia condicional realiza una de dos acciones posibles, sabandose en el resultado de una prueba (evaluación de una expresion)
        Una expresion booleana solo tiene dos posibles valores. 
        La sentencia condicional hace uso de esos dos posibles valores para elegir entre dos acciones diferentes.



    2.12 Un ejemplo más avanzado de sentencia condicional
        Al validar una sentencia condicional se siguen uno de dos posibles caminos, en donde cada uno de ellos puede contener un conjunto de sentencias.


    2.13 Variables locales
        Es una variable que se declara y se usa dentro de un solo metodo / constructor, su alcance y tiempo de vida se limita a la de su metodo.
        Se declaran dentro de un método / constructor, no llevan private o public.
        Su tiempo de vida es igual al tiempo de la ejecución del método / constructor.
        Se crean cuando se invoca un metodo y se destruyen cuando el metodo / constructor termina.
        Se suelen usar para guardar temporalmente un valor.
        Una variable local del mismo nombre que un campo evita que éste sea accedido o modificado dentro del método.


    2.14 Campos, parametros y variables locales
        Las tres clases de variables pueden almacenar un valor de acuerdo a su tipo.
        Los campos se definen fuera del constructor y metodos.
        Las variables locales se definen dentro de un metodo / constructor.
        Las variables locales no pueden ser accedidas desde fuera del metodo / constructor que las declara.
        Las variables locales deben ser inicializadas, ya que no cuentan con un valor por defecto.
        Los campos pueden ser accedidos desde cualquier método / constructor de la clase.
        Los campos no pueden ser accedidos desde otras clases mientras sean privadas.
        Los campos se usan para almacenar información que persiste durante la vida del objeto.
        Los parametros solo existen (viven) durante la ejecución del metodo / constructor, luego su espacio es destruido.
        Los parametros formales y las variables locales son de persistencia corta, solo viven durante la ejecucion del metodo / constructor por lo que sus valores se pierden entre llamadas. Por eso se dice que actuan solo como almacenamiento temporal.
        Los parametros formales se definen en el encabezado del constructor / metodo, reciben valores del exterior y asi se inicializan con los parametros actuales que forman parte de la llamada al metodo / constructor.



    2.15 Resumen de la maquina de boletos mejorada
        Las sentencias condicionales posibilitan seguir uno de dos caminos al evaluar su expresion.
        Las variables locales viven tanto como la ejecución del metodo / constructor.


    2.16 Ejercicios de revision
        Tipos de retorno.
        Tipos de parametro.
        Declarar una nueva clase.
        Declarar campos con su tipo de dato.
        Declarar constructores.

    2.17 Revisar un ejemplo familiar:
        Revision clase Student
        Uso de el método substring de la clase String.
        Uso del método length() de la clase String.
        if para validar longitud de campos.

    2.18 Resumen
        Todo lo visto en este capítulo
            Constructores
            Métodos
            Variables locales
            Campos - Variables de instancia
            Expresion boleana
            Condicional
            if
            Signatura del método
            Declaracion de clase
            Alcance de variables / Visibilidad
            Tipos de datos de retorno
            Void
            Sentencias
            Parametros
            Metodos de Acceso / Modificacion
            return
            Tiempo de vida

        ejercicio-libro

    


CAPITULO 3: Interacción de objetos.
    Los objetos deberían trabajar entre ellos cooperando con tareas individuales.


    3.1 El ejemplo reloj
        Reloj tipo Europeo.

    3.2 Abstraccion y Modularizacion
        Abstraccion: Habilidad de ignorar los detalles y centrar la atención en un nivel mas alto del problema.
        Cuando un problema se agranda es más dificil mantener todos los detalles al mismo tiempo.
        Si existe un problema grande y dificil de manejar se recomienda dividir el problema en partes pequeñas para que sea facil de tratar.
        Problemas en sub-problemas y así susecivamente hasta que sean suficientemente faciles de tratar. Así cada solución al pequeño prblema evita pensar en los detalles y esta solución se usa como un bloque de construcción para complementar a un sistema mas grande. Esta tecnica se le conoce como "divide y reinaras".

        Modularizacion: Es el proceso de dividir un todo en partes bien definidas que pueden ser construidas y examinadas por separado.

        Se debe usar modularización y abstracción de forma responsable de acuerdo a cada proyecto. Estos conceptos se complementan mutuamente. 


    3.3 Abstraccion en software
        Identificar componentes que se pueden programar como entidades independientes y luego usar esos componentes como si fueran partes simples sin tener encuenta su complejidad.
        En POO los componentes y subcomponentes son objetos.


    3.4 Modularizacion en el ejemplo reloj
        Se trata de dividir el problema, con la ayuda de la abstracción, de cierta forma en donde se logre identificar cada subproblema y éste a su vez alcance un nivel de independencia por si solo para solucionar un subproblema. De esta forma cada modulo identificado se adhiere a los demás módulos para lograr una solución.

    3.5 Implementación del visor del reloj.
        Una clase define tipos, esto quiere decir que el nombre de una clase puede ser usado para definir el tipo de una variable y estas variables que son de un tipo de clase pueden almacenar objetos de dicha clase.
            private NombreDeMiClaseEspecial variable1;

        El tipo de un campo especifica la naturaleza del valor que puede almacenar dicho campo.

    
    3.6 Comparación de diagramas de clases con diagramas de objetos.
        El diagrama de clases muestra la vista estatica de un programa. Muestra la relacion entre las clases de la aplicacion.
        El diagrama de objetos muestra la vista dinamica de un programa. Da información sobre los objetos en tiempo de ejecución. Muestra las relaciones entre objetos en un momento dado de la ejecución de la aplicacion.
        Las variables de tipo objeto no almacenan los valores en si, sino solo la referencia al objeto, y este a su ves es quien contiene el valor. El objeto al que se hace la referencia se almacena fuera del objeto que hace la referencia.
        

    3.7 Tipos Primitivos y tipos objetos
        Los tipos primitivos son aquellos que no son objetos. Los más comunes son int, float, double, long, char, boolean. Además no poseen métodos.
        Estos tipos primitivos se predefinen en el lenguaje java
        Los tipos objeto se definen mediante clases, algunas de estas se definen por el sistema de java estandar como el caso de String.
        Los primitivos se almacenan directamente en una variable, los objetos almacenan una referencia al objeto.


    3.8 El codigo del VisorDeReloj
        Analizar codigo de muestra visor-de-reloj


        3.8.1 Clase VisorDeNumeros
            Operadores logicos 
            &&
            ||
            !
            O exclusivo
            Disyuncion excluyente

            "Cadena" 
            + Concatenacion de cadenas

        3.8.2 Contatenacion de cadenas
            + Significa concatenacion o suma, dependiendo del tipo de sus operandos.

        3.8.3 El operador modulo
            Devuelve el residuo de la división de dos operandos numerador y denominador
                8 % 3   -> 8 mod 3  = 2
                El 3 cabe dos veces y el residuo es 2.
                n % 5 : Sus posibles valores son 0, 1, 2, 3, 4
                n % m : Si son variables enteras sus posibles valores son valores entre n y m
                    5 % 9 = 5
                    8 % 9 = 8
                    9 % 9 = 0
                    1 % 9 = 1
                    etc

        3.8.4 La clase VisorDeReloj
            Crea dos objetos de clase VisorDeNumeros
            Un String cadena de visor cadVisor
            Un constructor que inicializa en 24 las horas y en 60 los minutos (00:00)
            Un metodo ticTac para incrementar minutos y horas.

    3.9 Objetos que crean objetos
        Se declara un objeto de algun tipo de clase
            private VisorDeNumeros horas;

        Se crea un objeto con la palabra new
            horas = new VisorDeNumeros(24); // Se ejecuta el constructor de VisorDeNumeros con el parametro actual (24)

            el encabezado del constructor de VisorDeNumeros

                public VisorDeNumeros(int limiteMaximo) // Parametro formal (limiteMaximo)


        Ejercicio 3.24
            public Editor(Fichero name, int position);

        Ejercicio 3.25
            private Rectangulo ventana;
            ventana = new Rectangulo(int alto, int ancho);

    3.10 Constructores múltiples
        Sobrecarga: Puede darse en un constructor o método. 
            Las clases pueden contener mas de un constructor / metodo siempre que tengan distintos conjuntos de parametros.


    3.11 Llamadas a métodos
        Si llamamos a un método dentro de la misma clase se dice que es una llamada a un método interno.

            nombreDelMetodo (lista-parametros)

        3.11.2 Llamadas a metodos externos
            Se usa la notación de punto para la * llamada a método externo *

            objeto.nombreDelMetodo (lista-parametros)


            Ejercicio 3.28
                p1.imprimir (resumenClientes, false);
                p1.imprimir (listaProductos, true);

                p1.consultarEstado (1);
                p1.consultarEstado (3);

        3.11.3 Resumen del visor de reloj
            Se hace uso de métodos como ticTac sin importar como se realiza la tarea, en los proyectos reales es similar, solo se definen la signatura de las clases y lo que hará cada clase como comun acuerdo. Luego una persona podría implementar los métodos mientras que otra persona hace uso de ellos.

            El conjunto de métodos que estan disponibles para otro objeto se denomina su INTERFAZ

        Ejercicios 3.29 y 3.30

    3.12 Otro ejemplo de interaccion de objetos.
        El debugger (depurador) puede ser una herramienta muy importante a la hora de analizar de forma profunda un proyecto de software. La lectura de código es escencial en la vida de un programador.
        Un depurador permite ejecutar paso a paso una aplicacion para examinar el valor de las variable.
        Un caso famoso del origen del termino BUG data de 1945 en la Mark II por Grace Murray Hopper.

        3.12.1 El ejemplo del sistema de correo electrónico
            El servidor aloja clientes de correo electronico (usuarios).
            Los clientes envian mensajes ha diferentes usuarios (clientes de email)

        3.12.2 La palabra clave this
            Se usa cuando existe una sobrecarga de nombres, se da cuando entidades diferentes usan el mismo nombre de variables. Si existen 3 campos que se llaman igual a 3 parametros entonces existen 6 variables en total y esto no genera problemas ya que son independientes unas de las otras.
            En java la especificación dice que si se hace uso de una variable con nombre similar en el campo y en el parametro entonces se usa la mas declaración mas cercana encerrada en un bloque.

                private int edad = 0;
                private String nombre = "";

                Persona persona1 = new Persona(34, "Ali");
                public void Persona(int edad, String nombre) {
                    // Se tomaran 34 y Ali.
                    System.out.println("Mi nombre es " + nombre + " y mi edad es " + edad);
                }

            this hace referencia al objeto actual. De esta forma accedemos a los campos y no a los parametros.
            Generalmente se hace uso de nombres identicos para dar mejor legibilidad al codigo.

    3.13 Usar el depurador
        Ejercicio 3.33

        3.13.1 Establecer puntos de interrupción.

        3.13.2 Paso a paso

        3.13.3 Entrar en los métodos Step Into


    3.14 Revisión de llamadas a métodos
        Los objetos pueden llamar a métodos de otros objetos.

    3.15 Resumen
        Se ha estudiado cómo se puede dividir un problema en subproblemas, podemos identificar componentes en aquellos objetos que queremos modelar.
        Los objetos pueden crear otros objetos y se pueden invocar sus métodos unos con otros.
        Podemos usar diagramas de papel y lapíz y usar depuradores para investigar cómo se ejecuta una aplicación.
        

CAPITULO 4: Agrupar Objetos
    En este capítulo, se abordará la forma de introducir algunas maneras en que se pueden agrupar los objetos para formar colecciones y la clase ArrayList se trata como un ejemplo de colecciones de tamaño flexible y al uso de los vectores como colecciones de tamaño fijo.

    4.1 Agrupar objetos en colecciones de tamaño flexible
        Se requieren formas de agrupar objetos de forma flexible, en donde el tamaño sea dinamico y no se ate a un tamaño predefinido y estatico.

    4.2 Una agenda personal
        Algunos alcances

    4.3 Una primera vista a las bibliotecas de clases
        Las colecciones de objetos son objetos que pueden almacenar un numero arbitario de otros objetos.
        Los lenguajes OO frecuentemente estan acompañados de bibliotecas de clases. Éstas tienen, comunmente cientos o miles de clases diferentes las cuales son de ayuda, en java se les conoce como packages.
        ArrayList es un ejemplo de una clase coleccion.

            4.3.1 Ejemplo de uso de una biblioteca.
                Para obtener acceso a una clase de una biblioteca se usa import java.util.ArrayList;
                Se ubican siempre antes del comienzo de la declaracion de la clase.
                
                Al usar colecciones se deben especificar dos tipos: el propio de la coleccion y el tipo de elemento que se planea guardar.

                private ArrayList<String> notas; // Declarar campo notas
                notas = new ArrayList<String>(); //


    4.4 Estructuras de objetos con coleccione
        Los elementos (objetos o de otro tipo), pueden ir agregandose a la coleccion, esto aumentando su capacidad interna tanto como se requiera.
        Mantiene su cuenta privada de la cantidad de elementos que tiene almacenados.
        Mantiene el orden de los elementos que se agregan.


    4.5 Clases genéricas
        Requieren que se especifique un segundo tipo como parametro cuando se usa para declarar campos u otras variables, a estas se les llama clases genericas.
        Se puede especificar un ArrayList de String, un ArrayList de Personas, etc, etc. y se pueden usar en declaraciones de parametros, campos y tipos de retorno.


            Ejercicio 4.2:

            private ArrayList<Libro> biblioteca;


    4.6 Numeración dentro de las colecciones
        Los datos que se almacenan en colecciones tienen una numeración implicita y comienza en cero.
        Se le conoce como su indice y comienza desde cero.
        Hay que asuegurarse que el indice a que se intenta acceder sea valido. Sin caer en un desbordamiento.

            Ejercicio 4.3 Si una coleccion almacena 10 objetos, el metodo size retorna 10.
                R: 10

            Ejercicio 4.4: 
                elementos.get(4);

            Ejercicio 4.5
                R: 14

            Ejercicio 4.6
                notas.Add(cita);

    4.7 Eliminar un elemento de una coleccion
        Con el método remove tomando como parametro el índice se puede eliminar un objeto.
        Al eliminar un elemento de una colección se modifican los valores de los índices, esto quiere decir que si se elimina un elemento de un índice bajo, entonces todos los elementos se recorren una posicion a la izquierda para llenar el espacio vacio.
        Sucede lo mismo cuando se ingresan elementos entre elementos en una coleccion.


            Ejercicio 4.7: notas.Remove(2);
            Ejercicio 4.8: 5
            Ejercicio 4.9 
                R: notas.remove(indice);


    4.8 Procesar una coleccion completa
    







    
        pag 93
        
        











